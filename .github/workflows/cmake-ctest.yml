name: hdf5 plugins ctest runs

# Triggers the workflow on a call from another workflow
on:
  workflow_call:
    inputs:
      use_hdf:
        description: "The hdf5 base name of the binaries"
        required: true
        type: string
      snap_name:
        description: 'The name in the source tarballs'
        type: string
        required: false
        default: hdfsrc
      file_base:
        description: "The common base name of the source tarballs"
        required: true
        type: string
      preset_name:
        description: "The common base name of the preset configuration name to control the build"
        required: true
        type: string
      use_environ:
        description: 'Environment to locate files'
        type: string
        required: true
        default: snapshots
    secrets:
        AZURE_TENANT_ID:
            required: true
        AZURE_CLIENT_ID:
            required: true
        AZURE_CLIENT_SECRET:
            required: true
        AZURE_ENDPOINT:
            required: true
        AZURE_CODE_SIGNING_NAME:
            required: true
        AZURE_CERT_PROFILE_NAME:
            required: true

permissions:
  contents: read

jobs:
  build_and_test_win:
  # Windows w/ MSVC + CMake
  #
    name: "Windows MSVC CTest"
    runs-on: windows-latest
    steps:
      - name: Install Dependencies (Windows)
        run: choco install ninja

      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Check Secrets exists
        id: set-signing-state
        env: 
            super_secret: ${{ secrets.AZURE_ENDPOINT }}
        run: |
          if [[ '${{ env.super_secret }}' == '' ]]
          then
            echo "BINSIGN=false" >> $GITHUB_OUTPUT
          else
            echo "BINSIGN=true" >> $GITHUB_OUTPUT
          fi

      - name: Set file base name (Windows)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot'
          file: '${{ inputs.use_hdf }}-win-vs2022_cl.zip'

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-win-vs2022_cl.zip'

      - name: Uncompress gh binary (Win)
        run: 7z x ${{ github.workspace }}/${{ inputs.use_hdf }}-win-vs2022_cl.zip

      - name: Uncompress hdf5 binary (Win)
        working-directory: ${{ github.workspace }}/hdf5
        run: 7z x HDF5-*-win64.zip
        shell: bash

      - name: List files for the space (Win)
        run: |
              ls -l ${{ github.workspace }}/hdf5

      - name: create hdf5 location (Win)
        working-directory: ${{ github.workspace }}/hdf5
        run: |
          New-Item -Path "${{ github.workspace }}/HDF_Group/HDF5" -ItemType Directory
          Copy-Item -Path "${{ github.workspace }}/hdf5/HDF*/*" -Destination "${{ github.workspace }}/HDF_Group/HDF5" -Recurse
        shell: pwsh

      - name: List files for the space (Win)
        run: ls -l ${{ github.workspace }}/HDF_Group/HDF5

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR="${{ github.workspace }}/HDF_Group/HDF5"
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT
        shell: bash

      - name: List files for the binaries (Win)
        run: |
              ls -l ${{ github.workspace }}/HDF_Group/HDF5

      # Get files created by release script
      - name: Get zip-tarball (Windows)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: zip-tarball
              path: ${{ github.workspace }}

      - name: using powershell
        shell: pwsh
        run: Get-Location

      - name: List files for the space (Windows)
        run: |
              Get-ChildItem -Path ${{ github.workspace }}
              Get-ChildItem -Path ${{ runner.workspace }}
        shell: pwsh

      - name: Uncompress source (Windows)
        working-directory: ${{ github.workspace }}
        run: 7z x ${{ steps.set-file-base.outputs.FILE_BASE }}.zip
        shell: bash

      - name: Run ctest (Windows)
        env:
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}"
          cmake --workflow --preset=${{ inputs.preset_name }}-MSVC --fresh
        shell: bash

      - name: Sign files with Trusted Signing
        uses: azure/trusted-signing-action@v0.4.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
          files-folder: ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-MSVC
          files-folder-filter: msi
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256
        if: ${{ steps.set-signing-state.BINSIGN == 'true' }}

      - name: Publish binary (Windows)
        id: publish-ctest-binary
        run: |
          mkdir "${{ runner.workspace }}/build"
          mkdir "${{ runner.workspace }}/build/hdf5_plugins"
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING -Destination ${{ runner.workspace }}/build/hdf5_plugins/
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-MSVC/README.txt -Destination ${{ runner.workspace }}/build/hdf5_plugins/
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-MSVC/* -Destination ${{ runner.workspace }}/build/hdf5_plugins/ -Include *.zip
          cd "${{ runner.workspace }}/build"
          7z a -tzip ${{ steps.set-file-base.outputs.FILE_BASE }}-win-vs2022_cl.zip hdf5_plugins
        shell: pwsh

      - name: Publish msi binary (Windows)
        id: publish-ctest-msi-binary
        run: |
          mkdir "${{ runner.workspace }}/buildmsi"
          mkdir "${{ runner.workspace }}/buildmsi/hdf5_plugins"
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING -Destination ${{ runner.workspace }}/buildmsi/hdf5_plugins/
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-MSVC/README.txt -Destination ${{ runner.workspace }}/buildmsi/hdf5_plugins/
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-MSVC/* -Destination ${{ runner.workspace }}/buildmsi/hdf5_plugins/ -Include *.msi
          cd "${{ runner.workspace }}/buildmsi"
          7z a -tzip ${{ steps.set-file-base.outputs.FILE_BASE }}-win-vs2022_cl.msi.zip hdf5_plugins
        shell: pwsh

      - name: List files in the space (Windows)
        run: |
              Get-ChildItem -Path ${{ github.workspace }}
              Get-ChildItem -Path ${{ runner.workspace }}
        shell: pwsh

      # Save files created by ctest script
      - name: Save published binary (Windows)
        uses: actions/upload-artifact@v4
        with:
              name: zip-vs2022_cl-binary
              path: ${{ runner.workspace }}/build/${{ steps.set-file-base.outputs.FILE_BASE }}-win-vs2022_cl.zip
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Save published msi binary (Windows)
        uses: actions/upload-artifact@v4
        with:
              name: msi-vs2022_cl-binary
              path: ${{ runner.workspace }}/build/${{ steps.set-file-base.outputs.FILE_BASE }}-win-vs2022_cl.msi.zip
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  build_and_test_linux:
  # Linux (Ubuntu) w/ gcc + CMake
  #
    name: "Ubuntu gcc CMake"
    runs-on: ubuntu-latest
    steps:
      - name: Install CMake Dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build

      - name: Set file base name (Linux)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot'
          file: '${{ inputs.use_hdf }}-ubuntu-2204_gcc.tar.gz'

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-ubuntu-2204_gcc.tar.gz'

      - name: List files for the space (Linux)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress gh binary (Linux)
        run: tar -zxvf ${{ github.workspace }}/${{ inputs.use_hdf }}-ubuntu-2204_gcc.tar.gz

      - name: Uncompress hdf5 binary (Linux)
        run:  |
            cd "${{ github.workspace }}/hdf5"
            tar -zxvf ${{ github.workspace }}/hdf5/HDF5-*-Linux.tar.gz --strip-components 1

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR=${{ github.workspace }}/hdf5/HDF_Group/HDF5/
          FILE_NAME_HDF5=$(ls ${{ github.workspace }}/hdf5/HDF_Group/HDF5)
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT

      - name: List files for the binaries (Linux)
        run: |
              ls -l ${{ github.workspace }}/hdf5/HDF_Group/HDF5

      # Get files created by release script
      - name: Get tgz-tarball (Linux)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (Linux)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress source (Linux)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Run ctest (Linux)
        env:
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}"
          cmake --workflow --preset=${{ inputs.preset_name }}-GNUC --fresh
        shell: bash

      - name: Publish binary (Linux)
        id: publish-ctest-binary
        run: |
          mkdir "${{ runner.workspace }}/build"
          mkdir "${{ runner.workspace }}/build/hdf5_plugins"
          cp ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING ${{ runner.workspace }}/build/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-GNUC/README.txt ${{ runner.workspace }}/build/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-GNUC/*.tar.gz ${{ runner.workspace }}/build/hdf5_plugins
          cd "${{ runner.workspace }}/build"
          tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}-ubuntu-2204_gcc.tar.gz hdf5_plugins
        shell: bash

      - name: Publish deb binary (Linux)
        id: publish-ctest-deb-binary
        run: |
          mkdir "${{ runner.workspace }}/builddeb"
          mkdir "${{ runner.workspace }}/builddeb/hdf5_plugins"
          cp ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING ${{ runner.workspace }}/builddeb/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-GNUC/README.txt ${{ runner.workspace }}/builddeb/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-GNUC/*.deb ${{ runner.workspace }}/builddeb/hdf5_plugins
          cd "${{ runner.workspace }}/builddeb"
          tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}-ubuntu-2204_gcc.deb.tar.gz hdf5_plugins
        shell: bash

      - name: Publish rpm binary (Linux)
        id: publish-ctest-rpm-binary
        run: |
          mkdir "${{ runner.workspace }}/buildrpm"
          mkdir "${{ runner.workspace }}/buildrpm/hdf5_plugins"
          cp ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING ${{ runner.workspace }}/buildrpm/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-GNUC/README.txt ${{ runner.workspace }}/buildrpm/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-GNUC/*.rpm ${{ runner.workspace }}/buildrpm/hdf5_plugins
          cd "${{ runner.workspace }}/buildrpm"
          tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}-ubuntu-2204_gcc.rpm.tar.gz hdf5_plugins
        shell: bash

      - name: List files in the space (Linux)
        run: |
              ls ${{ github.workspace }}
              ls -l ${{ runner.workspace }}

      # Save files created by ctest script
      - name: Save published binary (Linux)
        uses: actions/upload-artifact@v4
        with:
              name: tgz-ubuntu-2204_gcc-binary
              path: ${{ runner.workspace }}/build/${{ steps.set-file-base.outputs.FILE_BASE }}-ubuntu-2204_gcc.tar.gz
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Save published binary deb (Linux)
        uses: actions/upload-artifact@v4
        with:
              name: deb-ubuntu-2204_gcc-binary
              path: ${{ runner.workspace }}/builddeb/${{ steps.set-file-base.outputs.FILE_BASE }}-ubuntu-2204_gcc.deb.tar.gz
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Save published binary rpm (Linux)
        uses: actions/upload-artifact@v4
        with:
              name: rpm-ubuntu-2204_gcc-binary
              path: ${{ runner.workspace }}/buildrpm/${{ steps.set-file-base.outputs.FILE_BASE }}-ubuntu-2204_gcc.rpm.tar.gz
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  build_and_test_mac_latest:
  # MacOS w/ Clang + CMake
  #
    name: "MacOS Clang CMake"
    runs-on: macos-latest
    steps:
      - name: Install Dependencies (MacOS_latest)
        run: brew install ninja

      - name: Set file base name (MacOS_latest)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      - name: Get hdf5 snapshot
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot'
          file: '${{ inputs.use_hdf }}-osx.tar.gz'

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-osx.tar.gz'

      - name: List files for the space (MacOS_latest)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress gh binary (MacOS_latest)
        run: tar -zxvf ${{ github.workspace }}/${{ inputs.use_hdf }}-osx*.tar.gz

      - name: Uncompress hdf5 binary (MacOS_latest)
        run:  |
            cd "${{ github.workspace }}/hdf5"
            tar -zxvf ${{ github.workspace }}/hdf5/HDF5-*-Darwin.tar.gz --strip-components 1

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR=${{ github.workspace }}/hdf5/HDF_Group/HDF5/
          FILE_NAME_HDF5=$(ls ${{ github.workspace }}/hdf5/HDF_Group/HDF5)
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT

      - name: List files for the binaries (MacOS_latest)
        run: |
              ls -l ${{ github.workspace }}/hdf5/HDF_Group/HDF5

      # Get files created by release script
      - name: Get tgz-tarball (MacOS_latest)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (MacOS_latest)
        run: |
              ls ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress source (MacOS_latest)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Run ctest (MacOS_latest)
        id: run-ctest
        env:
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}"
          cmake --workflow --preset=${{ inputs.preset_name }}-Clang --fresh
        shell: bash

      - name: Publish binary (MacOS_latest)
        id: publish-ctest-binary
        run: |
          mkdir "${{ runner.workspace }}/build"
          mkdir "${{ runner.workspace }}/build/hdf5_plugins"
          cp ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING ${{ runner.workspace }}/build/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-Clang/README.txt ${{ runner.workspace }}/build/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-Clang/*.tar.gz ${{ runner.workspace }}/build/hdf5_plugins
          cd "${{ runner.workspace }}/build"
          tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}-osx.tar.gz hdf5_plugins
        shell: bash

      - name: Publish dmg binary (MacOS_latest)
        id: publish-ctest-dmg-binary
        run: |
          mkdir "${{ runner.workspace }}/builddmg"
          mkdir "${{ runner.workspace }}/builddmg/hdf5_plugins"
          cp ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/COPYING ${{ runner.workspace }}/builddmg/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-Clang/README.txt ${{ runner.workspace }}/builddmg/hdf5_plugins
          cp ${{ runner.workspace }}/hdf5_plugins/build/${{ inputs.preset_name }}-Clang/*.dmg ${{ runner.workspace }}/builddmg/hdf5_plugins
          cd "${{ runner.workspace }}/builddmg"
          tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}-osx.dmg.tar.gz hdf5_plugins
        shell: bash

      - name: List files in the space (MacOS_latest)
        run: |
              ls ${{ github.workspace }}
              ls -l ${{ runner.workspace }}

      # Save files created by ctest script
      - name: Save published binary (MacOS_latest)
        uses: actions/upload-artifact@v4
        with:
              name: tgz-osx-binary
              path: ${{ runner.workspace }}/build/${{ steps.set-file-base.outputs.FILE_BASE }}-osx.tar.gz
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Save published dmg binary (MacOS_latest)
        uses: actions/upload-artifact@v4
        with:
              name: tgz-osx-dmg-binary
              path: ${{ runner.workspace }}/build/${{ steps.set-file-base.outputs.FILE_BASE }}-osx.dmg.tar.gz
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
