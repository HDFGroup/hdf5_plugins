name: hdf5 dev ctest script runs

# Triggers the workflow on a call from another workflow
on:
  workflow_call:
    inputs:
      use_hdf:
        description: "The hdf5 base name of the binaries"
        required: true
        type: string
      snap_name:
        description: 'The name in the source tarballs'
        type: string
        required: false
        default: hdfsrc
      file_base:
        description: "The common base name of the source tarballs"
        required: true
        type: string
      use_environ:
        description: 'Environment to locate files'
        type: string
        required: true
        default: snapshots

permissions:
  contents: read

jobs:
  build_and_test_win:
  # Windows w/ MSVC + CMake
  #
    name: "Windows MSVC CTest"
    runs-on: windows-latest
    steps:
      - name: Install Dependencies (Windows)
        run: choco install ninja

      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Set file base name (Windows)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get hdf5 snapshot
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot-1.14'
          file: '${{ inputs.use_hdf }}-win-vs2022_cl.zip'

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-win-vs2022_cl.zip'

      - name: Uncompress gh binary (Win)
        run: 7z x ${{ github.workspace }}/${{ inputs.use_hdf }}-win-vs2022_cl.zip

      - name: Uncompress hdf5 binary (Win)
        working-directory: ${{ github.workspace }}/hdf5
        run: 7z x HDF5-*-win64.zip
        shell: bash

      - name: List files for the space (Win)
        run: |
              ls -l ${{ github.workspace }}/hdf5

      - name: create hdf5 location (Win)
        working-directory: ${{ github.workspace }}/hdf5
        run: |
          New-Item -Path "${{ github.workspace }}/HDF_Group/HDF5" -ItemType Directory
          Copy-Item -Path "${{ github.workspace }}/hdf5/HDF*/*" -Destination "${{ github.workspace }}/HDF_Group/HDF5" -Recurse
        shell: pwsh

      - name: List files for the space (Win)
        run: ls -l ${{ github.workspace }}/HDF_Group/HDF5

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR="${{ github.workspace }}/HDF_Group/HDF5"
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT
        shell: bash

      - name: List files for the binaries (Win)
        run: |
              ls -l ${{ github.workspace }}/HDF_Group/HDF5

      # Get files created by release script
      - name: Get zip-tarball (Windows)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: zip-tarball
              path: ${{ github.workspace }}

      - name: using powershell
        shell: pwsh
        run: Get-Location

      - name: List files for the space (Windows)
        run: |
              Get-ChildItem -Path ${{ github.workspace }}
              Get-ChildItem -Path ${{ runner.workspace }}
        shell: pwsh

      - name: Uncompress source (Windows)
        working-directory: ${{ github.workspace }}
        run: 7z x ${{ steps.set-file-base.outputs.FILE_BASE }}.zip
        shell: bash

      - name: Copy script files for the space (Windows)
        run: |
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/CTestScript.cmake -Destination ${{ runner.workspace }}/hdf5_plugins/
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/HDF5PLconfig.cmake -Destination ${{ runner.workspace }}/hdf5_plugins/
        shell: pwsh

      - name: List files for the hdf5 (Windows)
        run: |
          Get-ChildItem -Path ${{ runner.workspace }}/hdf5_plugins
        shell: pwsh

      - name: Create options file (Windows)
        uses: "DamianReeves/write-file-action@master"
        with:
            path: ${{ runner.workspace }}/hdf5_plugins/HDF5PLoptions.cmake
            write-mode: overwrite
            contents: |
              #set (CTEST_DROP_SITE_INIT "my.cdash.org")
              # Change following line to submit to your CDash dashboard to a different CDash project
              #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
              set (MODEL "GHDaily")
              set (GROUP "GHDaily")
              set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
              set (ADD_BUILD_OPTIONS "-DUSE_SHARED_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON")
              set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DTGZPATH:PATH=${CTEST_SOURCE_DIRECTORY}/libs -DH5PL_ALLOW_EXTERNAL_SUPPORT:STRING=\"TGZ\"")
              set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")

      - name: Run ctest script (Windows)
        env:
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins"
          ctest -S HDF5PLconfig.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }},LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=VS202264,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C Release -VV -O hdf5_plugins.log
        shell: bash
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (Windows_intel)
        uses: actions/upload-artifact@v4
        with:
          name: cl-win-log
          path: ${{ runner.workspace }}/hdf5_plugins/hdf5_plugins.log
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  build_and_test_linux:
  # Linux (Ubuntu) w/ gcc + CMake
  #
    name: "Ubuntu gcc CMake"
    runs-on: ubuntu-latest
    steps:
      - name: Install CMake Dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build graphviz curl

      - name: Set file base name (Linux)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot-1.14'
          file: '${{ inputs.use_hdf }}-ubuntu-2404_gcc.tar.gz'

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-ubuntu-2404_gcc.tar.gz'

      - name: List files for the space (Linux)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress gh binary (Linux)
        run: tar -zxvf ${{ github.workspace }}/${{ inputs.use_hdf }}-ubuntu-2404_gcc.tar.gz

      - name: Uncompress hdf5 binary (Linux)
        run:  |
            cd "${{ github.workspace }}/hdf5"
            tar -zxvf ${{ github.workspace }}/hdf5/HDF5-*-Linux.tar.gz --strip-components 1

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR=${{ github.workspace }}/hdf5/HDF_Group/HDF5/
          FILE_NAME_HDF5=$(ls ${{ github.workspace }}/hdf5/HDF_Group/HDF5)
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT

      - name: List files for the binaries (Linux)
        run: |
              ls -l ${{ github.workspace }}/hdf5/HDF_Group/HDF5

      # Get files created by release script
      - name: Get tgz-tarball (Linux)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (Linux)
        run: |
            ls -l ${{ github.workspace }}
            ls ${{ runner.workspace }}

      - name: Uncompress source (Linux)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Copy script files for the space (Linux)
        run: |
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/CTestScript.cmake ${{ runner.workspace }}/hdf5_plugins
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/HDF5PLconfig.cmake ${{ runner.workspace }}/hdf5_plugins

      - name: List files for the hdf5_plugins (Linux)
        run: |
            ls ${{ runner.workspace }}/hdf5_plugins

      - name: Create options file (Linux)
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ runner.workspace }}/hdf5_plugins/HDF5PLoptions.cmake
          write-mode: overwrite
          contents: |
            #set (CTEST_DROP_SITE_INIT "my.cdash.org")
            # Change following line to submit to your CDash dashboard to a different CDash project
            #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
            set (MODEL "GHDaily")
            set (GROUP "GHDaily")
            set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "-DUSE_SHARED_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DTGZPATH:PATH=${CTEST_SOURCE_DIRECTORY}/libs -DH5PL_ALLOW_EXTERNAL_SUPPORT:STRING=\"TGZ\"")

      - name: Run ctest (Linux)
        env:
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins"
          ctest -S HDF5PLconfig.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }}-GCC,LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=Unix,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C Release -VV -O hdf5_plugins.log
        shell: bash
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (Linux)
        uses: actions/upload-artifact@v4
        with:
            name: gcc-ubuntu-log
            path: ${{ runner.workspace }}/hdf5_plugins/hdf5_plugins.log
            if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  build_and_test_mac_latest:
  # MacOS w/ Clang + CMake
  #
    name: "MacOS Clang CMake"
    runs-on: macos-latest
    steps:
      - name: Install Dependencies (MacOS_latest)
        run: brew install ninja

      - name: Set file base name (MacOS_latest)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      - name: Get hdf5 snapshot
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot-1.14'
          file: '${{ inputs.use_hdf }}-macos14_clang.tar.gz'

      - name: Get hdf5 release
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-macos14_clang.tar.gz'

      - name: List files for the space (MacOS_latest)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress gh binary (MacOS_latest)
        run: tar -zxvf ${{ github.workspace }}/${{ inputs.use_hdf }}-macos14_clang*.tar.gz

      - name: Uncompress hdf5 binary (MacOS_latest)
        run:  |
            cd "${{ github.workspace }}/hdf5"
            tar -zxvf ${{ github.workspace }}/hdf5/HDF5-*-Darwin.tar.gz --strip-components 1

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR=${{ github.workspace }}/hdf5/HDF_Group/HDF5/
          FILE_NAME_HDF5=$(ls ${{ github.workspace }}/hdf5/HDF_Group/HDF5)
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT

      - name: List files for the binaries (MacOS_latest)
        run: |
              ls -l ${{ github.workspace }}/hdf5/HDF_Group/HDF5

      # Get files created by release script
      - name: Get tgz-tarball (MacOS_latest)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (MacOS_latest)
        run: |
              ls ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress source (MacOS_latest)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Copy script files for the space (MacOS_latest)
        run: |
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/CTestScript.cmake ${{ runner.workspace }}/hdf5_plugins
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/HDF5PLconfig.cmake ${{ runner.workspace }}/hdf5_plugins

      - name: List files for the hdf5_plugins (MacOS_latest)
        run: |
              ls ${{ runner.workspace }}/hdf5_plugins

      - name: Create options file (MacOS_latest)
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ runner.workspace }}/hdf5_plugins/HDF5PLoptions.cmake
          write-mode: overwrite
          contents: |
            #set (CTEST_DROP_SITE_INIT "my.cdash.org")
            # Change following line to submit to your CDash dashboard to a different CDash project
            #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
            set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
            set (MODEL "GHDaily")
            set (GROUP "GHDaily")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "-DUSE_SHARED_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DTGZPATH:PATH=${CTEST_SOURCE_DIRECTORY}/libs -DH5PL_ALLOW_EXTERNAL_SUPPORT:STRING=\"TGZ\"")

      - name: Run ctest (MacOS_latest)
        id: run-ctest
        env:
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins"
          ctest -S HDF5PLconfig.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }}-Clang,LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=Unix,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C Release -VV -O hdf5_plugins.log
        shell: bash
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (MacOS_latest)
        uses: actions/upload-artifact@v4
        with:
          name: macos-log
          path: ${{ runner.workspace }}/hdf5_plugins/hdf5_plugins.log
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

####### intel builds
  build_and_test_win_intel:
  # Windows w/ OneAPI + CMake
  #
    name: "Windows Intel CTest"
    runs-on: windows-latest
    steps:
      - name: Install Dependencies (Windows_intel)
        run: choco install ninja

      - name: add oneAPI to env
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: intel
          version: '2024.1'

      - name: Set file base name (Windows_intel)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get hdf5 snapshot(Windows_intel)
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot-1.14'
          file: '${{ inputs.use_hdf }}-win-vs2022_intel.zip'

      - name: Get hdf5 release(Windows_intel)
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-win-vs2022_intel.zip'

      - name: Uncompress gh binary (Windows_intel)
        run: 7z x ${{ github.workspace }}/${{ inputs.use_hdf }}-win-vs2022_intel.zip

      - name: Uncompress hdf5 binary (Windows_intel)
        working-directory: ${{ github.workspace }}/hdf5
        run: 7z x HDF5-*-win64.zip
        shell: bash

      - name: List files for the space (Windows_intel)
        run: |
            ls -l ${{ github.workspace }}/hdf5

      - name: create hdf5 location (Windows_intel)
        working-directory: ${{ github.workspace }}/hdf5
        run: |
          New-Item -Path "${{ github.workspace }}/HDF_Group/HDF5" -ItemType Directory
          Copy-Item -Path "${{ github.workspace }}/hdf5/HDF*/*" -Destination "${{ github.workspace }}/HDF_Group/HDF5" -Recurse
        shell: pwsh

      - name: List files for the space (Windows_intel)
        run: ls -l ${{ github.workspace }}/HDF_Group/HDF5

      - name: set hdf5lib name
        id: set-hdf5lib-name
        run: |
          HDF5DIR="${{ github.workspace }}/HDF_Group/HDF5"
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT
        shell: bash

      - name: List files for the binaries (Windows_intel)
        run: |
            ls -l ${{ github.workspace }}/HDF_Group/HDF5

      # Get files created by release script
      - name: Get zip-tarball (Windows_intel)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: zip-tarball
              path: ${{ github.workspace }}

      - name: using powershell (Windows_intel)
        shell: pwsh
        run: Get-Location

      - name: List files for the space (Windows_intel)
        run: |
              Get-ChildItem -Path ${{ github.workspace }}
              Get-ChildItem -Path ${{ runner.workspace }}
        shell: pwsh

      - name: Uncompress source (Windows_intel)
        working-directory: ${{ github.workspace }}
        run: 7z x ${{ steps.set-file-base.outputs.FILE_BASE }}.zip
        shell: bash

      - name: Copy script files for the space (Windows_intel)
        run: |
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/CTestScript.cmake -Destination ${{ runner.workspace }}/hdf5_plugins/
          Copy-Item -Path ${{ runner.workspace }}/hdf5_plugins/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/HDF5PLconfig.cmake -Destination ${{ runner.workspace }}/hdf5_plugins/
        shell: pwsh

      - name: List files for the hdf5 (Windows_intel)
        run: |
              Get-ChildItem -Path ${{ runner.workspace }}/hdf5_plugins
        shell: pwsh

      - name: Create options file (Windows_intel)
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ runner.workspace }}/hdf5_plugins/HDF5PLoptions.cmake
          write-mode: overwrite
          contents: |
            #set (CTEST_DROP_SITE_INIT "my.cdash.org")
            # Change following line to submit to your CDash dashboard to a different CDash project
            #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
            #set (CMAKE_GENERATOR_TOOLSET "Intel C++ Compiler 2024,fortran=ifx")
            set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
            set (MODEL "GHDaily")
            set (GROUP "GHDaily")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "-DUSE_SHARED_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DTGZPATH:PATH=${CTEST_SOURCE_DIRECTORY}/libs -DH5PL_ALLOW_EXTERNAL_SUPPORT:STRING=\"TGZ\"")

      - name: Run ctest (Windows_intel) with oneapi
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins"
          ctest -S HDF5PLconfig.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }}-Intel,LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=VS202264,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C Release -VV -O hdf5_plugins.log
        shell: pwsh
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (Windows_intel)
        uses: actions/upload-artifact@v4
        with:
          name: intel-win-log
          path: ${{ runner.workspace }}/hdf5_plugins/hdf5_plugins.log
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  build_and_test_linux_intel:
  # Linux (Ubuntu) w/ OneAPI + CMake
  #
    name: "Ubuntu Intel CMake"
    runs-on: ubuntu-latest
    steps:
      - name: Install CMake Dependencies (Linux_intel)
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build doxygen graphviz curl

      - name: add oneAPI to env (Linux_intel)
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: intel
          version: '2024.1'

      - name: Set file base name (Linux_intel)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      - name: Get hdf5 release (Linux_intel)
        if: ${{ (inputs.use_environ == 'snapshots') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/snapshot-1.14'
          file: '${{ inputs.use_hdf }}-ubuntu-2404_intel.tar.gz'

      - name: Get hdf5 release (Linux_intel)
        if: ${{ (inputs.use_environ == 'release') }}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'HDFGroup/hdf5'
          version: 'tags/${{ inputs.use_hdf }}'
          file: '${{ inputs.use_hdf }}-ubuntu-2404_intel.tar.gz'

      - name: List files for the space (Linux_intel)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress gh binary (Linux_intel)
        run: tar -zxvf ${{ github.workspace }}/${{ inputs.use_hdf }}-ubuntu-2404_intel.tar.gz

      - name: Uncompress hdf5 binary (Linux_intel)
        run:  |
            cd "${{ github.workspace }}/hdf5"
            tar -zxvf ${{ github.workspace }}/hdf5/HDF5-*-Linux.tar.gz --strip-components 1

      - name: set hdf5lib name (Linux_intel)
        id: set-hdf5lib-name
        run: |
          HDF5DIR=${{ github.workspace }}/hdf5/HDF_Group/HDF5/
          FILE_NAME_HDF5=$(ls ${{ github.workspace }}/hdf5/HDF_Group/HDF5)
          echo "HDF5_ROOT=$HDF5DIR$FILE_NAME_HDF5" >> $GITHUB_OUTPUT

      - name: List files for the binaries (Linux_intel)
        run: |
              ls -l ${{ github.workspace }}/hdf5/HDF_Group/HDF5

      # Get files created by release script
      - name: Get tgz-tarball (Linux_intel)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (Linux_intel)
        run: |
              ls -l ${{ github.workspace }}
              ls ${{ runner.workspace }}

      - name: Uncompress source (Linux_intel)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Copy script files for the space (Linux_intel)
        run: |
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/CTestScript.cmake ${{ runner.workspace }}/hdf5_plugins
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/HDF5PLconfig.cmake ${{ runner.workspace }}/hdf5_plugins

      - name: List files for the hdf5 (Linux_Linux)
        run: |
          ls ${{ runner.workspace }}/hdf5_plugins

      - name: Create options file (Linux_intel)
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ runner.workspace }}/hdf5_plugins/HDF5PLoptions.cmake
          write-mode: overwrite
          contents: |
            #set (CTEST_DROP_SITE_INIT "my.cdash.org")
            # Change following line to submit to your CDash dashboard to a different CDash project
            #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
            set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
            set (MODEL "GHDaily")
            set (GROUP "GHDaily")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "-DUSE_SHARED_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DTGZPATH:PATH=${CTEST_SOURCE_DIRECTORY}/libs -DH5PL_ALLOW_EXTERNAL_SUPPORT:STRING=\"TGZ\"")

      - name: Run ctest (Linux_intel)
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
          HDF5_ROOT: ${{ steps.set-hdf5lib-name.outputs.HDF5_ROOT }}
        run: |
          cd "${{ runner.workspace }}/hdf5_plugins"
          ctest -S HDF5PLconfig.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }}-Intel,LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=Unix,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C Release -VV -O hdf5_plugins.log
        shell: bash
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (Linux_intel)
        uses: actions/upload-artifact@v4
        with:
          name: intel-ubuntu-log
          path: ${{ runner.workspace }}/hdf5_plugins/hdf5_plugins.log
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
